# Ver histórico de cambios en un determinado fichero:
git log -p -- <file>
git log --follow -p -- <file> : lo mismo pero te dice si el fichero fue renombrado

# Git blame
git blame -L 3122,3160 -w proto/sd/protocolSatData.c 


# Eliminar cambios realizados a un fichero:
git checkout HEAD -- my-file.txt     (-- significa que todo lo que venga a continuacion lo tome como nombre de fichero)

# Listar tags (con -n muestra la primera linea del tag)
git tag -n
git tag -n -l <tag_name>
git cat-file tag <tag_name>   : muestra info del tag

# cambiar varios mensajes de commits (por ejemplo, el cuarto y el quinto):
1) git rebase -i HEAD~5	: muestra los ultimos 5 commits en el editor
2) Cambiar la palabra "pick" del principio de linea a "reword" para todo commit que quieras cambiar su mensaje
3) Guardas y cierras. Se abrira un editor por cada uno de los commits a modificar (uno tras otro). 
4) Modificas el mensaje, guardas y cierras, en cada uno de los editores abiertos
5) git push --force branch-name  : al acabar actualizas remote (OJO! el force rompera las versiones locales de los que se hayan descargado la rama! NUNCA hacerlo en master!!!)

git stash
git stash pop

# Desde una branch, diferencia con master:
git diff --name-status master 	: ficheros que han cambiado
git diff master			: cambios en el código
git diff 1b3452f 2ab55bf	: diferencia entre commits
git diff 9652452~ 9652452	: diferencia entre commit y su antecesor
git diff HEAD^..HEAD		: diferencia con el último commit
git diff --name-only		: listar solo los nombres de los ficheros diferentes
git difftool -d master...branch : TRES puntos, diferencia de la branch a master teniendo en cuenta SOLO los cambios hecho en branch
git difftool -d master..branch  : DOS puntos, diferencia de la branch a master teniendo en cuenta tanto los cambios de branch como los que se han hecho en master

git difftool -d master..fifthplay/SVC-8618_SRV_setpoint_control   	: shows a complete diff between the two branches (I have configured meld as a difftool so I get a nice UI)
git difftool -d master...fifthplay/SVC-8618_SRV_setpoint_control	: shows a diff based on all commits that are in SVC-8618_SRV_setpoint_control that are added after merge, i.e. it will show a 										  diff as if SVC-8618_SRV_setpoint_control was rebased on master
# COMPARAR DOS BRANCHES
git difftool -d SVC-8687_Approximate_electrical_energy_with_instant_power..SVC-8705_Dimmer_integration

# Hacer push the una branch
git push -u fifthplay SVC-8618_SRV_setpoint_control

# Hacer rebase de una branch a master: desde la branch ejecutar
git rebase master

# Rebase interactivo
git rebase -i HEAD~5  : hacer rebase interactivo con los ultimos 5 commits (cambiar commits, hacer squash... etc)

# Otra forma de hacer squash de los ultimos 5 commits (se pierden los timestamps de los commits, a diferencia del rebase)
git reset --mixed HEAD~5    : vuelves a HEAD pero los cambios de los 5 ultimos commits se quedan en staged
git add .
git commit -m "squased 5 commits"  : los 5 commits anteriores ahora estan en este ultimo que se ha hecho


# Revert all uncommitted changes
git reset --hard HEAD
# Discard last commit
git reset --hard HEAD^

# Discard changes in file
git checkout -- file

# Recuperar commits hechos en ramas borradas y mas cosas
git reflog

# Remove all untracked files and directories. (`-f` is `force`, `-d` is `remove directories`)
git clean -fd

# Remove local branch
git branch -D the_local_branch

# Remove remote branch
git push origin :the_remote_branch
git push origin --delete the_remote_branch

# List all commits from all branches
git rev-list --remotes
git rev-list --all --remotes --pretty

# Rebase one branch into another
git checkout my_branch
git rebase --interact destination_branch
(delete unwonted commits and save)



git diff -> cambios que se han hecho en la branch actual desde el último commit
git checkout file.c  -> elimina los cambios hechos al fichero recuperando el fichero comiteado

# modificar commit message:
git commit --amend -m "Commit message"  -> actualiza el ultimo commit con el mensaje pero tambien cambia el hash! por lo que cambia el histórico, si haces push otros lo verán como un commit diferente
# añadir un fichero al último commit
git add file.c <-- lo metemos en staging
git commit --amend   -> igual que antes, cambia el hash y el history -> SOLO HACERLO SI NO SE HA PUSHEADO A OTRA GENTE


git log --stat  -> muestra los ficheros cambiados en cada commit!!!! <--------------------------

# Clean
Step 1 is to show what will be deleted by using the -n option:
# Print out the list of files and directories which will be removed (dry run)
git clean -n -d
Clean Step - beware: this will delete files:
# Delete the files from the repository
git clean -f

# git cherry-pick -> coge un commit y lo aplica a la branch actual. EJ:
1. en master haces git log y copias los 6 o 7 primeros caracteres del commit que quieres meter en la otra branch
2. haces un checkout de la branch
3. haces: git cherry-pick 1b8993b -> applica el commit de master a la branch actual
# si no queremos ese commit en master hacemos un git reset:
1. git checkout master
2. git reset --soft a5654fb  -> el commit al que queremos ir (reseteando los posteriores). Soft elimina el/los commits pero mantiene los cambios en staging por si se quieren commitear de nuevo
			     -> --mixed (default). Elimina el commit, los cambios los pone bien en staging bien en el working directory
		 	     -> --hard  Elimina el commit y los cambios de los tracked files. Los untracked files los deja en paz
# Eliminar cualquier directorio o fichero en untracked (por ejemplo si por error descomprimes un archivo comprimido en el repo de git):
git clean -df  (f de force)


git reflog -> muestra el log de todo lo hecho. El garbage collector lo elimina al cabo de unos días. Sirve para recuperar elementos borrados
git checkout 45f73ba3 -> recupero commit eliminado, pero estoy en deatached HEAD, tengo que crear una branch nueva para guardarlos
git branch nueva_branch


# git revert -> crea un nuevo commit encima de los anteriores que revierte los cambios
git revert 1b65f63a -> commit que quiero revertir. Se crea un nuevo commit que revierte el commit especificado. Así, si alguien ya hizo pull de tu repo, al siguiente pull se revertiran los cambios tb para el




git config --global user.name "Javier Casas"
git config --global user.email "javier.casasmaring@niko.eu"
git config --list

git init  -> crea el directorio .git e inicializa el repo local. Si queremos dejar de usar git en ese directorio simplemente borramos esa carpeta

git reset file.c -> saca file.c de staging y lo deja como untracked en el working directory
git reset -> lo mismo pero con todos los ficheros de staging

# Clonar repo
git clone <url> <where to clone>
git clone /path_to_repo/repo.git .  -> tb se puede usar un path para el repo

git remote -v -> lista información del repositorio 
git branch -a -> todas las branches locales y remotas


git pull origin master -> origin: nombre del repo remoto. master: nombre de la branch que queremos pullear
git push origin master -> origin: nombre del repo remoto. master: nombre de la branch que queremos pushear

git push -u origin branch_name  -> hace un push de branch_name a origin. El flag -u "linka" la branch a ese repo para que luego se pueda hacer el push y el pull simplemente con: git push / git pull

Hacer merge de una branch a master:
git checkout master
git merge branch_name

Borrar branch local:
git branch -d branch_name

Borrar branch del repositorio remoto:
git push origin --delete branch_name  (o tambien: git push origin :branch_name)

git push fifthplay --delete SVC-8705_Dimmer_integration  (git push fifthplay :SVC-8705_Dimmer_integration)
git push -u fifthplay SVC-8705_Dimmer_integration


# Hacer fetch de las tags
git fetch --tags fifthplay

# Ver commit antes de una fecha determinada
git rev-list -1 --before="2019-05-20 12:36:14" master --format=medium



# Si meto ficheros ya trackeados en .gitignore y no me los pilla:
Even if you haven't tracked the files so far, Git seems to be able to "know" about them even after you add them to .gitignore.
NOTE: First commit your current changes, or you will lose them.
Then run the following commands from the top folder of your Git repository:

git rm -r --cached .
git add .
git commit -m "fixed untracked files"


###### This pull request has conflicts. ######

You must resolve the conflicts by manually merging this branch into master. This will merge the pull request remotely.

Step 1: Checkout the target branch and merge in the changes from the source branch. Resolve conflicts.
    git checkout master
    git pull origin ISC-604-update-ureader-device-id-parameter-if-wrong
Step 2: After the merge conflicts are resolved, stage the changes accordingly, commit the changes and push.
    git commit
    git push origin HEAD
Step 3: The pull request will be updated and marked as merged.


####### Change branch
Rename a branch while pointed to any branch, do:
git branch -m <oldname> <newname>

Rename the current branch, you can do:
git branch -m <newname>

Push the local branch and reset the upstream branch:
git push origin -u <newname>

Delete the remote branch:
git push origin --delete <oldname>
